{
  "stats": {
    "suites": 15,
    "tests": 15,
    "passes": 0,
    "pending": 0,
    "failures": 15,
    "start": "2024-11-10T19:19:24.746Z",
    "end": "2024-11-10T19:19:26.614Z",
    "duration": 1868,
    "testsRegistered": 15,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8e3c64dd-2bca-4d23-87b7-f801d43e15ae",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "565f4d90-47f2-402d-9336-6e590df39405",
          "title": "GET /users",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user data",
              "fullTitle": "GET /users should return user data",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai\n      .request(server)\n      .get(\"/users\")\n      .end((err, res) => {\n        if (err) {\n          console.error(\"Request Error:\", err);\n          return done(err)\n        }\n        try {\n          console.log(\"Response:\", res);\n          console.log(\"Status Code:\", res.status);\n          console.log(\"Response Body: ===>\", res.body.message);\n          const users = res.body.message;\n          expect(res).to.have.status(200);\n          expect(users).to.be.an(\"array\");\n          console.log(\"First Element:\", res.body[0]);\n          expect(users[0]).to.have.property(\"_id\");\n          done(); \n        } catch (error) {\n          done(error);\n        }\n      });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:10:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "ec608cc2-8a66-4ede-9b68-365e87fbcbe8",
              "parentUUID": "565f4d90-47f2-402d-9336-6e590df39405",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ec608cc2-8a66-4ede-9b68-365e87fbcbe8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "bb0f73ae-bb35-4c25-8850-0961c4fd9835",
          "title": "GET /users/:email",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a single user by email",
              "fullTitle": "GET /users/:email should return a single user by email",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst sampleEmail = \"kesiamukile@gmail.com\"; \nchai\n  .request(server)\n  .get(`/User/${sampleEmail}`)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err);\n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ========>\", res.body);\n      expect(res).to.have.status(200);           \n      expect(res.body).to.be.an(\"object\");  \n      expect(res.body).to.have.property(\"_id\");    \n      expect(res.body).to.have.property(\"name\"); \n      expect(res.body).to.have.property(\"email\"); \n      expect(res.body.email).to.equal(sampleEmail);\n      done(); \n    } catch (error) {\n      done(error)\n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:42:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "d8797f1f-ba3c-4e67-8829-cf68fb2d7128",
              "parentUUID": "bb0f73ae-bb35-4c25-8850-0961c4fd9835",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d8797f1f-ba3c-4e67-8829-cf68fb2d7128"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "01219497-625b-4515-990d-531e32816831",
          "title": "POST /api/data",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user and return user data",
              "fullTitle": "POST /api/data should create a new user and return user data",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst userData = {\n  name: \"Tracia\",\n  email: \"traciamutobe@gmaill.com\",\n  Age: \"20\",\n  password: \"traciaMk\"\n};\nchai\n  .request(server)\n  .post(\"/api/data\")\n  .send(userData)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err)\n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body.message);\n      const responseMessage = res.body.message;\n      const responseData = res.body.data;\n      expect(res).to.have.status(201);\n      expect(responseMessage).to.equal(\"Data received successfully\");\n      expect(responseData).to.be.an(\"object\");\n      expect(responseData).to.have.property(\"name\", userData.name);\n      expect(responseData).to.have.property(\"email\", userData.email);\n      expect(responseData).to.have.property(\"Age\", userData.Age);\n      expect(responseData).to.have.property(\"password\", userData.password);\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:81:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "afe6205b-f145-4fdb-bf03-6f8612ab8590",
              "parentUUID": "01219497-625b-4515-990d-531e32816831",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "afe6205b-f145-4fdb-bf03-6f8612ab8590"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "3cfe3106-f0c0-422f-ba8a-f2fee0771e91",
          "title": "GET /Availableproducts",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Availableproducts data",
              "fullTitle": "GET /Availableproducts should return Availableproducts data",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nchai\n  .request(server)\n  .get(\"/Availableproducts\")\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const users = res.body;\n      expect(res).to.have.status(200);\n      expect(users).to.be.an(\"array\");\n      console.log(\"First Element:\", res.body[0]);\n      expect(users[0]).to.have.property(\"_id\");\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:117:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "5601abf7-f2a3-4204-9841-62fba3416f19",
              "parentUUID": "3cfe3106-f0c0-422f-ba8a-f2fee0771e91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5601abf7-f2a3-4204-9841-62fba3416f19"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "f374e97e-ccfa-4bb4-8c70-7044eef5dff4",
          "title": "GET /Availableproducts/:id",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a single product by ID",
              "fullTitle": "GET /Availableproducts/:id should return a single product by ID",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst ObjectId = \"665363a73867fb5467bd2e33\";\nchai\n  .request(server)\n  .get(`/Availableproducts/${ObjectId}`)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body:\", res.body);\n      expect(res).to.have.status(200);\n      expect(res.body).to.be.an(\"object\");\n      expect(res.body).to.have.property(\"_id\");\n      expect(res.body._id).to.equal(ObjectId);\n      expect(res.body).to.have.property(\"Name\");\n      expect(res.body).to.have.property(\"Price\");\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:150:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "2da8d57f-5afe-49a0-a78f-ee7bc8cc82ab",
              "parentUUID": "f374e97e-ccfa-4bb4-8c70-7044eef5dff4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2da8d57f-5afe-49a0-a78f-ee7bc8cc82ab"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "361eb988-21b8-4ca9-9724-b9e45c6ef291",
          "title": "POST /Availableproducts",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new product and return product data",
              "fullTitle": "POST /Availableproducts should create a new product and return product data",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userData = {\n  name: \"Orange shirt\",\n  Price: \"160\",\n  Size: \"XL, S\",\n  Quality: \"Cotton wood\"\n};\nchai\n  .request(server)\n  .post(\"/Availableproducts\")\n  .send(userData)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Response Body: ===>\", res.body);\n      expect(res).to.have.status(201);\n      expect(res.text).to.equal(\"Product added successfully\");\n      const newproduct = res.body.data;\n      expect(newproduct).to.be.an(\"object\");\n      expect(newproduct).to.have.property(\"name\", userData.name);\n      expect(newproduct).to.have.property(\"Price\", userData.Price);\n      expect(newproduct).to.have.property(\"Size\", userData.Size);\n      expect(newproduct).to.have.property(\"Quality\", userData.Quality);\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:186:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "1b1254d9-e2ea-4767-b10c-1d335369088a",
              "parentUUID": "361eb988-21b8-4ca9-9724-b9e45c6ef291",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1b1254d9-e2ea-4767-b10c-1d335369088a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "27218898-b19f-4d3f-b300-d81ea4b1e978",
          "title": "GET /possiblelocation",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Possiblelocations data",
              "fullTitle": "GET /possiblelocation should return Possiblelocations data",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nchai\n  .request(server)\n  .get(\"/Possiblelocation\")\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const locations = res.body.data;\n      expect(res).to.have.status(200);\n      expect(locations).to.be.an(\"array\");\n      if (locations.length > 0) {\n        console.log(\"First Element:\", locations[0]);\n        expect(locations[0]).to.have.property(\"_id\");\n      }\n      done(); \n    } catch (error) {\n      done(error);\n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:221:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "8f29451e-63b5-46a1-aa9f-dbbcaa8b434a",
              "parentUUID": "27218898-b19f-4d3f-b300-d81ea4b1e978",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8f29451e-63b5-46a1-aa9f-dbbcaa8b434a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "47a7afcd-b59f-45ef-9416-10d3f7ea2d04",
          "title": "GET /possiblelocation/:id",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a single possible location by id",
              "fullTitle": "GET /possiblelocation/:id should return a single possible location by id",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst locationId = \"66530200bc48c59ab504fe26\"; \nchai\n  .request(server)\n  .get(`/Possiblelocation/${locationId}`)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err);\n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const location = res.body.data;\n      expect(res).to.have.status(200);\n      expect(location).to.be.an(\"object\");\n      expect(location).to.have.property(\"_id\");\n      expect(location).to.have.property(\"Country\");\n      done(); \n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:254:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "35055e00-dee7-4a9d-b947-8006612c89a1",
              "parentUUID": "47a7afcd-b59f-45ef-9416-10d3f7ea2d04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "35055e00-dee7-4a9d-b947-8006612c89a1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "e2af3f23-68fc-437e-ab55-4b0f9785e0a5",
          "title": "POST /possiblelocation",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new possible location",
              "fullTitle": "POST /possiblelocation should create a new possible location",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst locationData = {\n  Country: \"Nigeria\",\n  Province: \"Kano State\",\n  City: \"Kano\",\n  Userid: \"('8722449ect48c59ab504fdes')\" \n};\nchai\n  .request(server)\n  .post(\"/Possiblelocation\")\n  .send(locationData)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const newLocation = res.body.data;\n      expect(res).to.have.status(201);\n      expect(newLocation).to.be.an(\"object\");\n      expect(newLocation).to.have.property(\"_id\");\n      expect(newLocation).to.have.property(\"Country\", locationData.Country);\n      expect(newLocation).to.have.property(\"Province\", locationData.Province);\n      expect(newLocation).to.have.property(\"City\", locationData.City);\n      expect(newLocation).to.have.property(\"Userid\", locationData.Userid);\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:293:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "bb9c1d91-2f26-44f5-a069-a787354ff359",
              "parentUUID": "e2af3f23-68fc-437e-ab55-4b0f9785e0a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bb9c1d91-2f26-44f5-a069-a787354ff359"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "985b25e0-cfba-4305-8e5b-64f0e4f1d832",
          "title": "GET /userscart",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the user's cart data",
              "fullTitle": "GET /userscart should return the user's cart data",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nchai\n  .request(server)\n  .get(\"/Userscart\")\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err);\n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const cartItems = res.body.data;\n      expect(res).to.have.status(200);  \n      expect(cartItems).to.be.an(\"array\");  \n      if (cartItems.length > 0) {\n        console.log(\"First Cart Item:\", cartItems[0]);\n        expect(cartItems[0]).to.have.property(\"Order\");\n        expect(cartItems[0]).to.have.property(\"Size\");\n        expect(cartItems[0]).to.have.property(\"Color\");\n      }\n      done(); \n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:329:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "5cbccfdc-e64d-4c75-95fa-88752bf76e51",
              "parentUUID": "985b25e0-cfba-4305-8e5b-64f0e4f1d832",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5cbccfdc-e64d-4c75-95fa-88752bf76e51"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "2effcb86-61d5-483b-aec0-04f509e023c1",
          "title": "POST /userscart",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new cart item for the user",
              "fullTitle": "POST /userscart should add a new cart item for the user",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst newCartItem = {\n  email: \"CraceMKt@gmail.com\",\n  Order: \"T-shirt\",\n  Size: \"M\",\n  Color: \"Red\"\n};\nchai.request(server)\n  .post(\"/Userscart\")\n  .send(newCartItem)\n  .end((err, res) => {\n    if (err) {\n      return done(err); \n    }\n    console.log(\"Response:\", res);\n    console.log(\"Status Code:\", res.status);\n    console.log(\"Response Body:\", res.body.data);\n    expect(res).to.have.status(201);\n    const responseData = res.body.data;\n    expect(responseData).to.be.an(\"object\");\n    expect(responseData).to.have.property(\"email\", newCartItem.email);\n    expect(responseData).to.have.property(\"Order\", newCartItem.Order);\n    expect(responseData).to.have.property(\"Size\", newCartItem.Size);\n    expect(responseData).to.have.property(\"Color\", newCartItem.Color);\n    done(); \n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:372:10)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "f277b7ac-0082-416c-9c40-297ddd388ba6",
              "parentUUID": "2effcb86-61d5-483b-aec0-04f509e023c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f277b7ac-0082-416c-9c40-297ddd388ba6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "ab4942bb-d73b-479f-9cf2-73bd09b14ce9",
          "title": "POST /userscart",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new cart item for the user",
              "fullTitle": "POST /userscart should add a new cart item for the user",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst newCartItem = {\n  email: \"CraceMKt@gmail.com\",\n  Order: \"T-shirt\",\n  Size: \"M\",\n  Color: \"Red\"\n};\nchai.request(server)\n  .post(\"/Userscart\")\n  .send(newCartItem)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    console.log(\"Response:\", res);\n    console.log(\"Status Code:\", res.status);\n    console.log(\"Response Body:\", res.body.data);\n    expect(res).to.have.status(201);\n    const responseData = res.body.data;\n    expect(responseData).to.be.an(\"object\");\n    expect(responseData).to.have.property(\"email\", newCartItem.email);\n    expect(responseData).to.have.property(\"Order\", newCartItem.Order);\n    expect(responseData).to.have.property(\"Size\", newCartItem.Size);\n    expect(responseData).to.have.property(\"Color\", newCartItem.Color);\n    done(); \n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:407:10)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "66961a96-65a4-492e-8b11-2532b902031a",
              "parentUUID": "ab4942bb-d73b-479f-9cf2-73bd09b14ce9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "66961a96-65a4-492e-8b11-2532b902031a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "1b5643a6-b39b-4d27-93a9-268ae9610b3e",
          "title": "GET /stores",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a list of stores",
              "fullTitle": "GET /stores should return a list of stores",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \n\nchai.request(server)\n  .get(\"/stores\")\n  .end((err, res) => {\n    if (err) {\n      return done(err); \n    }\n    console.log(\"Status Code:\", res.status);\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an(\"array\");\n    res.body.forEach((store, index) => {\n      console.log(`Store ${index}:`, store);\n      expect(store).to.have.property(\"_id\");\n      if (store.hasOwnProperty(\"status\")) {\n        expect(store).to.have.property(\"status\");\n      }\n      if (store.hasOwnProperty(\"Address\")) {\n        expect(store).to.have.property(\"Address\");\n      }\n      if (store.hasOwnProperty(\"storecode\")) {\n        expect(store).to.have.property(\"storecode\");\n      }\n      if (store.hasOwnProperty(\"storeName\")) {\n        expect(store).to.have.property(\"storeName\");\n      }\n      if (store.hasOwnProperty(\"email\")) {\n        expect(store.email).to.be.a(\"string\");\n      }\n    });\n    done(); \n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:436:10)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "87a35c92-6578-447e-afc7-584ed077361c",
              "parentUUID": "1b5643a6-b39b-4d27-93a9-268ae9610b3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "87a35c92-6578-447e-afc7-584ed077361c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "c2870a7c-3513-4295-bcb5-a14c185f4572",
          "title": "POST /stores",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new store",
              "fullTitle": "POST /stores should add a new store",
              "timedOut": false,
              "duration": 30,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst newStore = {\n  name: \"CETim\",\n  email: \"info.newsmarket@gmail.com\",\n  products: [\n    { productId: \"001\", name: \"Newset\", price: 100 },\n    { \"productId\": \"002\", \"name\": \"Product 2\", \"price\": 200 }\n  ],\n  status: \"active\",\n  Address: \"Newmarket\",\n  storecode: \"7892\",\n  storeName: \"CETim\"\n};\nchai.request(server)\n  .post(\"/stores\")\n  .send(newStore)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    console.log(\"Response:\", res);\n    console.log(\"Status Code:\", res.status);\n    console.log(\"Response Body:===>\", res.body);\n    expect(res).to.have.status(201);\n    const responseData = res.body.data;\n    expect(responseData).to.be.an(\"object\");\n    expect(responseData).to.have.property(\"name\", newStore.name);\n    expect(responseData).to.have.property(\"email\", newStore.email);\n    expect(responseData).to.have.property(\"status\", newStore.status);\n    expect(responseData).to.have.property(\"Address\", newStore.Address);\n    expect(responseData).to.have.property(\"storecode\", newStore.storecode);\n    expect(responseData).to.have.property(\"storeName\", newStore.storeName);\n    expect(responseData.products).to.be.an(\"array\").that.has.lengthOf(2);\n    done();\n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:492:10)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "cdea77a7-fb41-4fa6-9013-49d342569fbb",
              "parentUUID": "c2870a7c-3513-4295-bcb5-a14c185f4572",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cdea77a7-fb41-4fa6-9013-49d342569fbb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "73770f20-03a3-4914-9c36-05165211225d",
          "title": "GET /stores/:email",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a store by email",
              "fullTitle": "GET /stores/:email should return a store by email",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst email = \"info.newsmarket@gmail.com\";\nchai.request(server)\n  .get(`/stores/${email}`)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    console.log(\"Response:\", res);\n    console.log(\"Status Code:\", res.status);\n    console.log(\"Response Body: ===>\", res.body);\n    \n    const products = res.body;\n    expect(res).to.have.status(200);\n    expect(products).to.be.an(\"array\");\n    if (products.length > 0 && products[0].store) {\n      const storeInfo = products[0].store;\n      expect(storeInfo).to.have.property(\"_id\");\n      expect(storeInfo).to.have.property(\"name\");\n      expect(storeInfo).to.have.property(\"email\", email);\n      expect(storeInfo).to.have.property(\"status\");\n      expect(storeInfo).to.have.property(\"Address\");\n      expect(storeInfo).to.have.property(\"storecode\");\n      expect(storeInfo).to.have.property(\"storeName\");\n    }\n    done(); \n  });",
              "err": {
                "message": "TypeError: chai.request is not a function",
                "estack": "TypeError: chai.request is not a function\n    at Context.<anonymous> (file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:525:10)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "cb07b0e5-4bc5-446c-971d-77ba5255623a",
              "parentUUID": "73770f20-03a3-4914-9c36-05165211225d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cb07b0e5-4bc5-446c-971d-77ba5255623a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 3000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}