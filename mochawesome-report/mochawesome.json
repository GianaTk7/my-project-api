{
  "stats": {
    "suites": 15,
    "tests": 15,
    "passes": 13,
    "pending": 0,
    "failures": 2,
    "start": "2024-11-10T19:30:44.894Z",
    "end": "2024-11-10T19:31:01.893Z",
    "duration": 16999,
    "testsRegistered": 15,
    "passPercent": 86.66666666666667,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aeba6b28-be30-4663-aa82-b92c2395fcef",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0d9dce5a-ee1e-4e66-9c7a-924f28631bfd",
          "title": "GET /users",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user data",
              "fullTitle": "GET /users should return user data",
              "timedOut": false,
              "duration": 1444,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n      .request.execute(server)\n      .get(\"/users\")\n      .end((err, res) => {\n        if (err) {\n          console.error(\"Request Error:\", err);\n          return done(err)\n        }\n        try {\n          console.log(\"Response:\", res);\n          console.log(\"Status Code:\", res.status);\n          console.log(\"Response Body: ===>\", res.body.message);\n          const users = res.body.message;\n          expect(res).to.have.status(200);\n          expect(users).to.be.an(\"array\");\n          console.log(\"First Element:\", res.body[0]);\n          expect(users[0]).to.have.property(\"_id\");\n          done(); \n        } catch (error) {\n          done(error);\n        }\n      });",
              "err": {},
              "uuid": "c58e6eaa-5312-4d67-8eb5-d423ed3d0802",
              "parentUUID": "0d9dce5a-ee1e-4e66-9c7a-924f28631bfd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c58e6eaa-5312-4d67-8eb5-d423ed3d0802"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1444,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "3b4f2871-e33b-46f1-b039-fad600f9e58c",
          "title": "GET /users/:email",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a single user by email",
              "fullTitle": "GET /users/:email should return a single user by email",
              "timedOut": false,
              "duration": 921,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst sampleEmail = \"kesiamukile@gmail.com\"; \nchai\n  .request.execute(server)\n  .get(`/User/${sampleEmail}`)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err);\n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ========>\", res.body);\n      expect(res).to.have.status(200);           \n      expect(res.body).to.be.an(\"object\");  \n      expect(res.body).to.have.property(\"_id\");    \n      expect(res.body).to.have.property(\"name\"); \n      expect(res.body).to.have.property(\"email\"); \n      expect(res.body.email).to.equal(sampleEmail);\n      done(); \n    } catch (error) {\n      done(error)\n    }\n  });",
              "err": {
                "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 200 but got 404",
                "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 200 but got 404\n    at file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:54:31\n    at Request.callback (node_modules\\superagent\\lib\\node\\index.js:837:12)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\index.js:1078:18)\n    at IncomingMessage.emit (node:events:531:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": "- 404\n+ 200\n"
              },
              "uuid": "b8164b66-91e8-4ea4-94f3-0144a9970cfb",
              "parentUUID": "3b4f2871-e33b-46f1-b039-fad600f9e58c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b8164b66-91e8-4ea4-94f3-0144a9970cfb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 921,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "1c42ce6c-92a9-4c57-b5e7-9141045b7d21",
          "title": "POST /api/data",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user and return user data",
              "fullTitle": "POST /api/data should create a new user and return user data",
              "timedOut": false,
              "duration": 855,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst userData = {\n  name: \"Tracia\",\n  email: \"traciamutobe@gmaill.com\",\n  Age: \"20\",\n  password: \"traciaMk\"\n};\nchai\n  .request.execute(server)\n  .post(\"/api/data\")\n  .send(userData)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err)\n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body.message);\n      const responseMessage = res.body.message;\n      const responseData = res.body.data;\n      expect(res).to.have.status(201);\n      expect(responseMessage).to.equal(\"Data received successfully\");\n      expect(responseData).to.be.an(\"object\");\n      expect(responseData).to.have.property(\"name\", userData.name);\n      expect(responseData).to.have.property(\"email\", userData.email);\n      expect(responseData).to.have.property(\"Age\", userData.Age);\n      expect(responseData).to.have.property(\"password\", userData.password);\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {},
              "uuid": "3cc06b2e-8456-47f3-aa38-5b7ed78404fe",
              "parentUUID": "1c42ce6c-92a9-4c57-b5e7-9141045b7d21",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3cc06b2e-8456-47f3-aa38-5b7ed78404fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 855,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "ea9da420-6a3f-4ac6-b087-62ee332a0dbc",
          "title": "GET /Availableproducts",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Availableproducts data",
              "fullTitle": "GET /Availableproducts should return Availableproducts data",
              "timedOut": false,
              "duration": 1684,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nchai\n  .request.execute(server)\n  .get(\"/Availableproducts\")\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const users = res.body;\n      expect(res).to.have.status(200);\n      expect(users).to.be.an(\"array\");\n      console.log(\"First Element:\", res.body[0]);\n      expect(users[0]).to.have.property(\"_id\");\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {},
              "uuid": "1b295fa9-ed75-4224-97c2-768b7f84e88c",
              "parentUUID": "ea9da420-6a3f-4ac6-b087-62ee332a0dbc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b295fa9-ed75-4224-97c2-768b7f84e88c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1684,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "55f79ea1-10c3-4946-9064-ae0a86618e96",
          "title": "GET /Availableproducts/:id",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a single product by ID",
              "fullTitle": "GET /Availableproducts/:id should return a single product by ID",
              "timedOut": false,
              "duration": 820,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst ObjectId = \"665363a73867fb5467bd2e33\";\nchai\n  .request.execute(server)\n  .get(`/Availableproducts/${ObjectId}`)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body:\", res.body);\n      expect(res).to.have.status(200);\n      expect(res.body).to.be.an(\"object\");\n      expect(res.body).to.have.property(\"_id\");\n      expect(res.body._id).to.equal(ObjectId);\n      expect(res.body).to.have.property(\"Name\");\n      expect(res.body).to.have.property(\"Price\");\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {},
              "uuid": "128743a3-1464-4a4d-bd69-303e7b283d9b",
              "parentUUID": "55f79ea1-10c3-4946-9064-ae0a86618e96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "128743a3-1464-4a4d-bd69-303e7b283d9b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 820,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "d8cb264f-1a36-42ec-9184-da7d2a6fab08",
          "title": "POST /Availableproducts",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new product and return product data",
              "fullTitle": "POST /Availableproducts should create a new product and return product data",
              "timedOut": false,
              "duration": 656,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userData = {\n  name: \"Orange shirt\",\n  Price: \"160\",\n  Size: \"XL, S\",\n  Quality: \"Cotton wood\"\n};\nchai\n  .request.execute(server)\n  .post(\"/Availableproducts\")\n  .send(userData)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Response Body: ===>\", res.body);\n      expect(res).to.have.status(201);\n      expect(res.text).to.equal(\"Product added successfully\");\n      const newproduct = res.body.data;\n      expect(newproduct).to.be.an(\"object\");\n      expect(newproduct).to.have.property(\"name\", userData.name);\n      expect(newproduct).to.have.property(\"Price\", userData.Price);\n      expect(newproduct).to.have.property(\"Size\", userData.Size);\n      expect(newproduct).to.have.property(\"Quality\", userData.Quality);\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {
                "message": "AssertionError: expected '{\"data\":{\"name\":\"Orange shirt\",\"Price…' to equal 'Product added successfully'",
                "estack": "AssertionError: expected '{\"data\":{\"name\":\"Orange shirt\",\"Price…' to equal 'Product added successfully'\n    at file:///C:/Users/ELS/Desktop/IPITProjects/MyITproject/Backend/test/api.test.mjs:198:31\n    at Request.callback (node_modules\\superagent\\lib\\node\\index.js:837:12)\n    at C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\node_modules\\superagent\\lib\\node\\index.js:1078:18\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\parsers\\json.js:21:7)\n    at IncomingMessage.emit (node:events:531:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": "- {\"data\":{\"name\":\"Orange shirt\",\"Price\":\"160\",\"Size\":\"XL, S\",\"Quality\":\"Cotton wood\"}}\n+ Product added successfully\n"
              },
              "uuid": "36c9dd60-55d4-47b2-bcbb-6a4675fb80a6",
              "parentUUID": "d8cb264f-1a36-42ec-9184-da7d2a6fab08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "36c9dd60-55d4-47b2-bcbb-6a4675fb80a6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 656,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "c1a519de-947c-4a0b-86a0-0777140c3275",
          "title": "GET /possiblelocation",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Possiblelocations data",
              "fullTitle": "GET /possiblelocation should return Possiblelocations data",
              "timedOut": false,
              "duration": 1250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nchai\n  .request.execute(server)\n  .get(\"/Possiblelocation\")\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const locations = res.body.data;\n      expect(res).to.have.status(200);\n      expect(locations).to.be.an(\"array\");\n      if (locations.length > 0) {\n        console.log(\"First Element:\", locations[0]);\n        expect(locations[0]).to.have.property(\"_id\");\n      }\n      done(); \n    } catch (error) {\n      done(error);\n    }\n  });",
              "err": {},
              "uuid": "f7f9ae5c-2226-49c8-84bb-aed21cbc1e42",
              "parentUUID": "c1a519de-947c-4a0b-86a0-0777140c3275",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7f9ae5c-2226-49c8-84bb-aed21cbc1e42"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1250,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "a51c84c8-7565-4fb3-b395-e185b52d7e49",
          "title": "GET /possiblelocation/:id",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a single possible location by id",
              "fullTitle": "GET /possiblelocation/:id should return a single possible location by id",
              "timedOut": false,
              "duration": 1080,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst locationId = \"66530200bc48c59ab504fe26\"; \nchai\n  .request.execute(server)\n  .get(`/Possiblelocation/${locationId}`)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err);\n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const location = res.body.data;\n      expect(res).to.have.status(200);\n      expect(location).to.be.an(\"object\");\n      expect(location).to.have.property(\"_id\");\n      expect(location).to.have.property(\"Country\");\n      done(); \n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {},
              "uuid": "c4b9c8c8-af4e-4038-99d4-a3f2331c2f48",
              "parentUUID": "a51c84c8-7565-4fb3-b395-e185b52d7e49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4b9c8c8-af4e-4038-99d4-a3f2331c2f48"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1080,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "30830828-6b63-4f67-a8bd-ec5ee3df17d3",
          "title": "POST /possiblelocation",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new possible location",
              "fullTitle": "POST /possiblelocation should create a new possible location",
              "timedOut": false,
              "duration": 1133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst locationData = {\n  Country: \"Nigeria\",\n  Province: \"Kano State\",\n  City: \"Kano\",\n  Userid: \"('8722449ect48c59ab504fdes')\" \n};\nchai\n  .request.execute(server)\n  .post(\"/Possiblelocation\")\n  .send(locationData)\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err); \n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const newLocation = res.body.data;\n      expect(res).to.have.status(201);\n      expect(newLocation).to.be.an(\"object\");\n      expect(newLocation).to.have.property(\"_id\");\n      expect(newLocation).to.have.property(\"Country\", locationData.Country);\n      expect(newLocation).to.have.property(\"Province\", locationData.Province);\n      expect(newLocation).to.have.property(\"City\", locationData.City);\n      expect(newLocation).to.have.property(\"Userid\", locationData.Userid);\n      done();\n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {},
              "uuid": "33cf1e01-3595-49b3-80f3-490f02012740",
              "parentUUID": "30830828-6b63-4f67-a8bd-ec5ee3df17d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "33cf1e01-3595-49b3-80f3-490f02012740"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "7e45d9b3-80f9-4293-8076-d42c60822f18",
          "title": "GET /userscart",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the user's cart data",
              "fullTitle": "GET /userscart should return the user's cart data",
              "timedOut": false,
              "duration": 1296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nchai\n  .request.execute(server)\n  .get(\"/Userscart\")\n  .end((err, res) => {\n    if (err) {\n      console.error(\"Request Error:\", err);\n      return done(err);\n    }\n    try {\n      console.log(\"Response:\", res);\n      console.log(\"Status Code:\", res.status);\n      console.log(\"Response Body: ===>\", res.body);\n      const cartItems = res.body.data;\n      expect(res).to.have.status(200);  \n      expect(cartItems).to.be.an(\"array\");  \n      if (cartItems.length > 0) {\n        console.log(\"First Cart Item:\", cartItems[0]);\n        expect(cartItems[0]).to.have.property(\"Order\");\n        expect(cartItems[0]).to.have.property(\"Size\");\n        expect(cartItems[0]).to.have.property(\"Color\");\n      }\n      done(); \n    } catch (error) {\n      done(error); \n    }\n  });",
              "err": {},
              "uuid": "7752eca9-9c97-4b7c-8671-c657f22f2e12",
              "parentUUID": "7e45d9b3-80f9-4293-8076-d42c60822f18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7752eca9-9c97-4b7c-8671-c657f22f2e12"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1296,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "29c3ca1e-95fc-4e05-ab28-cb8ff298ebd4",
          "title": "POST /userscart",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new cart item for the user",
              "fullTitle": "POST /userscart should add a new cart item for the user",
              "timedOut": false,
              "duration": 1098,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst newCartItem = {\n  email: \"CraceMKt@gmail.com\",\n  Order: \"T-shirt\",\n  Size: \"M\",\n  Color: \"Red\"\n};\nchai.request.execute(server)\n  .post(\"/Userscart\")\n  .send(newCartItem)\n  .end((err, res) => {\n    if (err) {\n      return done(err); \n    }\n    console.log(\"Response:\", res);\n    console.log(\"Status Code:\", res.status);\n    console.log(\"Response Body:\", res.body.data);\n    expect(res).to.have.status(201);\n    const responseData = res.body.data;\n    expect(responseData).to.be.an(\"object\");\n    expect(responseData).to.have.property(\"email\", newCartItem.email);\n    expect(responseData).to.have.property(\"Order\", newCartItem.Order);\n    expect(responseData).to.have.property(\"Size\", newCartItem.Size);\n    expect(responseData).to.have.property(\"Color\", newCartItem.Color);\n    done(); \n  });",
              "err": {},
              "uuid": "2ff93f24-a609-4218-bfd0-fad68f4169ce",
              "parentUUID": "29c3ca1e-95fc-4e05-ab28-cb8ff298ebd4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ff93f24-a609-4218-bfd0-fad68f4169ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1098,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "4c862e1b-bbce-46e8-86be-171c5d3744fe",
          "title": "POST /userscart",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new cart item for the user",
              "fullTitle": "POST /userscart should add a new cart item for the user",
              "timedOut": false,
              "duration": 1394,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst newCartItem = {\n  email: \"CraceMKt@gmail.com\",\n  Order: \"T-shirt\",\n  Size: \"M\",\n  Color: \"Red\"\n};\nchai.request.execute(server)\n  .post(\"/Userscart\")\n  .send(newCartItem)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    console.log(\"Response:\", res);\n    console.log(\"Status Code:\", res.status);\n    console.log(\"Response Body:\", res.body.data);\n    expect(res).to.have.status(201);\n    const responseData = res.body.data;\n    expect(responseData).to.be.an(\"object\");\n    expect(responseData).to.have.property(\"email\", newCartItem.email);\n    expect(responseData).to.have.property(\"Order\", newCartItem.Order);\n    expect(responseData).to.have.property(\"Size\", newCartItem.Size);\n    expect(responseData).to.have.property(\"Color\", newCartItem.Color);\n    done(); \n  });",
              "err": {},
              "uuid": "d42877cd-ce86-460e-b412-b9eb83fc9906",
              "parentUUID": "4c862e1b-bbce-46e8-86be-171c5d3744fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d42877cd-ce86-460e-b412-b9eb83fc9906"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1394,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "96357e68-d350-40fa-8cc8-1c867348c13b",
          "title": "GET /stores",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a list of stores",
              "fullTitle": "GET /stores should return a list of stores",
              "timedOut": false,
              "duration": 889,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \n\nchai.request.execute(server)\n  .get(\"/stores\")\n  .end((err, res) => {\n    if (err) {\n      return done(err); \n    }\n    console.log(\"Status Code:\", res.status);\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an(\"array\");\n    res.body.forEach((store, index) => {\n      console.log(`Store ${index}:`, store);\n      expect(store).to.have.property(\"_id\");\n      if (store.hasOwnProperty(\"status\")) {\n        expect(store).to.have.property(\"status\");\n      }\n      if (store.hasOwnProperty(\"Address\")) {\n        expect(store).to.have.property(\"Address\");\n      }\n      if (store.hasOwnProperty(\"storecode\")) {\n        expect(store).to.have.property(\"storecode\");\n      }\n      if (store.hasOwnProperty(\"storeName\")) {\n        expect(store).to.have.property(\"storeName\");\n      }\n      if (store.hasOwnProperty(\"email\")) {\n        expect(store.email).to.be.a(\"string\");\n      }\n    });\n    done(); \n  });",
              "err": {},
              "uuid": "5b42e61e-6e6c-4f83-b3dc-ff6e7e886a6f",
              "parentUUID": "96357e68-d350-40fa-8cc8-1c867348c13b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b42e61e-6e6c-4f83-b3dc-ff6e7e886a6f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 889,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "ecafc6c9-0402-441a-9235-87d757cff1ec",
          "title": "POST /stores",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new store",
              "fullTitle": "POST /stores should add a new store",
              "timedOut": false,
              "duration": 1126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst newStore = {\n  name: \"CETim\",\n  email: \"info.newsmarket@gmail.com\",\n  products: [\n    { productId: \"001\", name: \"Newset\", price: 100 },\n    { \"productId\": \"002\", \"name\": \"Product 2\", \"price\": 200 }\n  ],\n  status: \"active\",\n  Address: \"Newmarket\",\n  storecode: \"7892\",\n  storeName: \"CETim\"\n};\nchai.request.execute(server)\n  .post(\"/stores\")\n  .send(newStore)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    console.log(\"Response:\", res);\n    console.log(\"Status Code:\", res.status);\n    console.log(\"Response Body:===>\", res.body);\n    expect(res).to.have.status(201);\n    const responseData = res.body.data;\n    expect(responseData).to.be.an(\"object\");\n    expect(responseData).to.have.property(\"name\", newStore.name);\n    expect(responseData).to.have.property(\"email\", newStore.email);\n    expect(responseData).to.have.property(\"status\", newStore.status);\n    expect(responseData).to.have.property(\"Address\", newStore.Address);\n    expect(responseData).to.have.property(\"storecode\", newStore.storecode);\n    expect(responseData).to.have.property(\"storeName\", newStore.storeName);\n    expect(responseData.products).to.be.an(\"array\").that.has.lengthOf(2);\n    done();\n  });",
              "err": {},
              "uuid": "8a2950a7-f1a9-4b71-939f-ad57ffe5518e",
              "parentUUID": "ecafc6c9-0402-441a-9235-87d757cff1ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a2950a7-f1a9-4b71-939f-ad57ffe5518e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        },
        {
          "uuid": "cbf3c840-341d-4ec8-85e5-74db1dfae6d6",
          "title": "GET /stores/:email",
          "fullFile": "C:\\Users\\ELS\\Desktop\\IPITProjects\\MyITproject\\Backend\\test\\api.test.mjs",
          "file": "\\test\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a store by email",
              "fullTitle": "GET /stores/:email should return a store by email",
              "timedOut": false,
              "duration": 1081,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); \nconst email = \"info.newsmarket@gmail.com\";\nchai.request.execute(server)\n  .get(`/stores/${email}`)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    console.log(\"Response:\", res);\n    console.log(\"Status Code:\", res.status);\n    console.log(\"Response Body: ===>\", res.body);\n    \n    const products = res.body;\n    expect(res).to.have.status(200);\n    expect(products).to.be.an(\"array\");\n    if (products.length > 0 && products[0].store) {\n      const storeInfo = products[0].store;\n      expect(storeInfo).to.have.property(\"_id\");\n      expect(storeInfo).to.have.property(\"name\");\n      expect(storeInfo).to.have.property(\"email\", email);\n      expect(storeInfo).to.have.property(\"status\");\n      expect(storeInfo).to.have.property(\"Address\");\n      expect(storeInfo).to.have.property(\"storecode\");\n      expect(storeInfo).to.have.property(\"storeName\");\n    }\n    done(); \n  });",
              "err": {},
              "uuid": "62871603-f902-410b-a4a0-83e5e1bcf2b2",
              "parentUUID": "cbf3c840-341d-4ec8-85e5-74db1dfae6d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62871603-f902-410b-a4a0-83e5e1bcf2b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1081,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 3000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}